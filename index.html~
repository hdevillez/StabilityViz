<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node {
  stroke: #fff;
  stroke-width: 1.5px;
}

.link {
  stroke: #999;
  stroke-opacity: .6;
   
}

rect.selection {
  fill: transparent;
  stroke-dasharray: 3px;
  stroke: black;
  stroke-width: 2px;
}
 
 
.selected {
   stroke: blue;
   stroke-width: 5;
   stroke-dasharray: 3;
}

.active {
  border:3px solid grey; 
  background-color: grey;
  color: white; 
}


.btn {
	-moz-box-shadow:inset 0px 0px 14px -3px #f2fadc;
	-webkit-box-shadow:inset 0px 0px 14px -3px #f2fadc;
	box-shadow:inset 0px 0px 14px -3px #f2fadc;
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #dbe6c4), color-stop(1, #9ba892));
	background:-moz-linear-gradient(top, #dbe6c4 5%, #9ba892 100%);
	background:-webkit-linear-gradient(top, #dbe6c4 5%, #9ba892 100%);
	background:-o-linear-gradient(top, #dbe6c4 5%, #9ba892 100%);
	background:-ms-linear-gradient(top, #dbe6c4 5%, #9ba892 100%);
	background:linear-gradient(to bottom, #dbe6c4 5%, #9ba892 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#dbe6c4', endColorstr='#9ba892',GradientType=0);
	background-color:#dbe6c4;
	-moz-border-radius:6px;
	-webkit-border-radius:6px;
	border-radius:6px;
	border:1px solid #b2b8ad;
	display:inline-block;
	cursor:pointer;
	color:#757d6f;
	font-family:Arial;
	font-size: 12px;
	font-weight:bold;
	padding: 3px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #ced9bf;
}
.btn:hover {
	background:-webkit-gradient(linear, left top, left bottom, color-stop(0.05, #9ba892), color-stop(1, #dbe6c4));
	background:-moz-linear-gradient(top, #9ba892 5%, #dbe6c4 100%);
	background:-webkit-linear-gradient(top, #9ba892 5%, #dbe6c4 100%);
	background:-o-linear-gradient(top, #9ba892 5%, #dbe6c4 100%);
	background:-ms-linear-gradient(top, #9ba892 5%, #dbe6c4 100%);
	background:linear-gradient(to bottom, #9ba892 5%, #dbe6c4 100%);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#9ba892', endColorstr='#dbe6c4',GradientType=0);
	background-color:#9ba892;
}
.btn:active {
	position:relative;
	top:1px;
}




#completeGraph {

  float:left;
}

</style>


<body>




<p>Select Graph: </p>


<select name="graphsChoice" id="graphChoice" onchange="loadGraph()" selectedIndex = "1">
<option value="data/example1.json">example1</option>
<option value="data/example2.json">example2</option>
<option value="data/example3.json">example3</option>
<option value="data/example4.json">example4</option>
<option value="data/example5.json">example5</option>
</select>
<button onclick="partition()" value = "off" id = "partitionButton">Partition</button>
<button onclick="walk(time+1)">Walk</button>
<button onclick="automaticWalk()" id = "automaticWalkButton" >Automatic Walk</button>
<button onclick="reinitialization()">Reinitialization</button>
<button onclick="showEmptyBarChart()">Show Bar Chart</button>

<p id="loadGraph"></p>



<div id = "completeGraph"></div>
<div id = "partitionGraph"></div>

<p>

  <label for="time" 
         style="display: inline-block; width: 240px; text-align: right">
         Time = <span id="time-value">0</span>
  </label>
  <input type="range" min="0" max="150" id="time">
</p>


<script src="lib/d3.min.js"></script>
<script src ="lib/math.js"></script>
<script src ="lib/numeric.min.js"></script>
<script src ="lib/ryb-color-mixer.js"></script>

<script src ="loadJSON.js"></script>
<script src ="readUserGraph.js"></script>
<script src ="graph.js"></script>
<script src ="partition.js"></script>
<script src ="barChart.js"></script>



<script>

var NB_MAX_COLOR = 10;
var nbColor = 3;
var nbWalkerTot = 0;
var groupNode = []; //Array containing the nodes selected
var color = d3.scale.category20(); //Array of random color


var circles = null, lines = null, graph = null;

var width = 600,
    height = 500;
    
var force = d3.layout.force()
    .charge(-1000)
    .linkDistance(75)
    .size([width, height]);


var svg = d3.select("#completeGraph").append("svg")
    .attr("width", width)
    .attr("height", height);
    
var svg2 = d3.select("#partitionGraph").append("svg")
    .attr("width", width)
    .attr("height", height);

var currColor = "#ff0000";

svg.append("rect")
  .attr("class", "colorChoice")
  .attr("width", 50)
  .attr("height", 50)
  .attr("fill", "red")
  .attr("x", 5)
  .attr("y", 5)
  .attr("rx", 15) // rounded corner
  .attr("ry", 15)
  .on("click", function() {
    currColor = "#ff0000";
    
    svg.selectAll(".colorChoice")
      .style("stroke-width", "0");
    d3.select(this).style("stroke", "#000000");
    d3.select(this).style("stroke-width", "3");
  });

svg.append("rect")
  .attr("class", "colorChoice")
  .attr("width", 50)
  .attr("height", 50)
  .attr("fill", "yellow")
  .attr("x", 65)
  .attr("y", 5)
  .attr("rx", 15)
  .attr("ry", 15)
  .on("click", function() {
    currColor = "#00ff00";
    
    svg.selectAll(".colorChoice")
      .style("stroke-width", "0");
    
    d3.select(this).style("stroke", "#000000");
    d3.select(this).style("stroke-width", "3");

    

  });
  
svg.append("rect")
  .attr("class", "colorChoice")
  .attr("width", 50)
  .attr("height", 50)
  .attr("fill", "blue")
  .attr("x", 125)
  .attr("y", 5)
  .attr("rx", 15)
  .attr("ry", 15)
  .on("click", function() {
    currColor = "#0000ff";
    
    svg.selectAll(".colorChoice")
      .style("stroke-width", "0");
    d3.select(this).style("stroke", "#000000");
    d3.select(this).style("stroke-width", "3");
});


d3.select("#time").property("value", 0);
d3.select("#graphChoice").property("selectedIndex", 0);
d3.select("#time").on("input", function() {
  walk(+this.value);
});


var time = 0;
var initialNodeisClicked = false;

loadGraph("data/example1.json");

function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
}

function sumArray(numArray) {
  var sum = 0;
  for(var i = 0; i <numArray.length; i++)
    sum += numArray[i];
  return sum;
}

function sumLineArray2D(tab2D, line){
        var sum = 0;
        for(var i = 0; i < nbColor; i++){
                sum += tab2D[i][line];
        }
        return sum;
}

function walk(newTime) {
  
  time = newTime;
  
  d3.select("#time-value").text(time);
  d3.select("#time").property("value", time);


  var Xn = [];
  for( var i = 0; i < nbColor; i++) {
    Xn[i] = math.multiply(graph.X0[i], math.pow(graph.P, time));
  }
  
  for(var i = 0; i < nbColor; i++) {
    for(var j = 0; j < graph.nodes.length; j++) {
      graph.nodes[j].nbWalkers[i] = Xn[i].subset(math.index(j));
    }

  }
  
  update();
  
}

var automaticWalkInterval = null;  
function automaticWalk() {
  
  if(d3.select("#automaticWalkButton").classed("active")) {
    d3.select("#automaticWalkButton").classed("active", false);
    clearInterval(automaticWalkInterval);
  }
  else {
    d3.select("#automaticWalkButton").classed("active", true);
    automaticWalkInterval = setInterval(function () {walk(/*math.round(time + graph.maxTime/60)*/1);}, 500);
  }
}


function update() {

  if(node != null) {

    node
      .transition()
      .attr("r", function(d) {return (sumArray(d.nbWalkers)/nbWalkerTot)* 100 +5})
     // .attr("opacity", function(d) {return (sumArray(d.nbWalkers)/nbWalkerTot)*0.9+0.1 })
      .style("fill", changeColorNode) 
      .attr("title", function(d) { return d.nbWalkers[0] +"/"+d.nbWalkers[1] +"/"+d.nbWalkers[2] });
  }
  
  fillBarChart();

}

function reinitialization() {
  
  d3.select("#automaticWalkButton").classed("active", false);

  if(automaticWalkInterval != null) //Remove automatic walk
    clearInterval(automaticWalkInterval);
  
  
  clearBarChart();   
  time = 1;
 
  for(var i = 0; i < nbColor; i++) {
    for(var j = 0; j < graph.nodes.length; j++) {

        graph.nodes[j].nbWalkers[i] = 0;
        graph.X0[i][j] = 0;
    }
  }
  
  node
    .transition()
      .attr("r", 15)
      .attr("title", function(d) { return d.nbWalkers[0] +"/"+d.nbWalkers[1] +"/"+d.nbWalkers[2] })
      .style("fill", "#ffffff")
      
  d3.select("#time").property("value", 0);
  time = 0;
  d3.select("#time-value").text(time);

}

function changeColorNode(d) {
    
        
  var maxWalker = getMaxOfArray(d.nbWalkers);
        
  var rybColor = [];
  for(var i = 0; i < nbColor; i++) {
    if(maxWalker != 0)
      rybColor[i] = 255 * d.nbWalkers[i]/maxWalker; //
    else
      rybColor[i] = 0;
  }
  return "#" +(rybColorMixer.rybToRgb(rybColor, { hex: true}));
         
}
</script>



