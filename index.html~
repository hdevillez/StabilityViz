<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node {
  stroke: #fff;
  stroke-width: 1.5px;
}

.link {
  stroke: #999;
  stroke-opacity: .6;
   
}

rect.selection {
  fill: transparent;
  stroke-dasharray: 3px;
  stroke: black;
  stroke-width: 2px;
}
 
 
.selected {
   stroke: blue;
   stroke-width: 5;
   stroke-dasharray: 3;
}

#completeGraph {

  float:left;
}

</style>


<body>

<button onclick="walk()">Walk</button>
<button onclick="reinitialization()">Reinitialization</button>
<button onclick="partition()" value = "off" id = "partitionButton">Partition</button>

<p>Select Graph: </p>


<select name="graphsChoice" id="graphChoice" onmouseleave="loadGraph()">
<option value="data/example1.json">example1</option>
<option value="data/example2.json">example2</option>
<option value="data/example3.json">example3</option>
<option value="data/example4.json">example4</option>
</select>

<button onclick="loadGraph()">Load</button>

<p id="loadGraph"></p>


<p id="reinitialization"></p>
<p id="walk"> </p>
<p  id = "partition" ></p>

<div id = "completeGraph"></div>
<div id = "partitionGraph"></div>

<script src="d3.min.js"></script>
<script src ="math.js"></script>
<script src ="loadJSON.js"></script>
<script src ="readUserGraph.js"></script>
<script src ="graph.js"></script>
<script src = "partition.js"></script>

<p>

  <label for="time" 
         style="display: inline-block; width: 240px; text-align: right">
         Time = <span id="time-value">0</span>
  </label>
  <input type="range" min="0" max="150" id="time">
</p>




<script>
var nbWalkerTot = 100;
var groupNode = []; //Array containing the nodes selected

function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        var copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        var copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        var copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}



d3.select("#time").property("value", 0);

d3.select("#time").on("input", function() {
  
  step = +this.value;
  walk();
});


var step = 1;



function walk() {
  
  d3.select("#time-value").text(step);
  d3.select("#time").property("value", step);


  var Xn = math.multiply(graph.X0, math.pow(graph.P, step));
  
  for(var i = 0; i < graph.nodes.length; i++) {
    graph.nodes[i].nbWalker = Xn.subset(math.index(i));
    

  }
  
  step++;
  update();
  
}

function update() {

  if(node != null) {

    node
      .transition()
      .attr("opacity", function(d) { return (d.nbWalker/nbWalkerTot)*0.9+0.1 })  
      .attr("r", function(d) {return (d.nbWalker/nbWalkerTot)* 50+ 10})
    node
      .attr("title", function(d) { return d.nbWalker});
      
   
    console.log("opacity and label refreshed");
  }

}

function reinitialization() {
  
  step = 1;
 
  
  for(var i = 0; i < graph.nodes.length; i++) {
    graph.nodes[i].nbWalker = graph.X0[i];
    

  }
  
  
  update();  
}
</script>

