<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node {
  stroke: #fff;
  stroke-width: 1.5px;
}

.link {
  stroke: #999;
  stroke-opacity: .6;
   
}

rect.selection {
  fill: transparent;
  stroke-dasharray: 3px;
  stroke: black;
  stroke-width: 2px;
}
 
 
.selected {
   stroke: blue;
   stroke-width: 5;
   stroke-dasharray: 3;
}

#completeGraph {

  float:left;
}

</style>


<body>

<button onclick="getElementById('walk').innerHTML=walk()">Walk</button>
<button onclick="getElementById('reinitialization').innerHTML=reinitialization()">Reinitialization</button>
<button onclick="getElementById('partition').innerHTML = partition()">Partition</button>

<p id="reinitialization"></p>
<p id="walk"> </p>
<p  id = "partition" ></p>

<div id = "completeGraph"></div>
<div id = "partitionGraph"></div>

<script src="d3.min.js"></script>
<script src ="math.js"></script>
<script src ="loadJSON.js"></script>
<script src ="readUserGraph.js"></script>
<script src ="graph.js"></script>

<p>

  <label for="time" 
         style="display: inline-block; width: 240px; text-align: right">
         Time = <span id="time-value">0</span>
  </label>
  <input type="range" min="0" max="150" id="time">
</p>


<p>Select Graph: </p>



<select name="graphsChoice" id="graphChoice">
<option value="example1.json">example1</option>
<option value="example2.json">example2</option>
<option value="example3">example3</option>
<option value="example4">example4</option>
</select>

<button onclick="getElementById('loadGraph').innerHTML=loadGraph()">Load</button>

<p id="loadGraph"></p>


<script>
var nbWalkerTot = 100;
var groupNode = []; //Array containing the nodes selected

function clone(obj) {
    if(obj === null || typeof(obj) !== 'object' || 'isActiveClone' in obj)
        return obj;

    var temp = obj.constructor(); // changed

    for(var key in obj) {
        if(Object.prototype.hasOwnProperty.call(obj, key)) {
            obj['isActiveClone'] = null;
            temp[key] = clone(obj[key]);
            delete obj['isActiveClone'];
        }
    }    

    return temp;
}

function copy(obj1, obj2) {
    if(obj === null || typeof(obj) !== 'object' || 'isActiveClone' in obj)
        return;

    for(var key in obj) {
        if(Object.prototype.hasOwnProperty.call(obj2, key)) {

            obj1[key] = obj2[key];

        }
    }    
}

d3.select("#time").property("value", 0);

d3.select("#time").on("input", function() {
  
  step = +this.value;
  walk();
});

var step = 1;



function walk() {
  
  d3.select("#time-value").text(step);
  d3.select("#time").property("value", step);


  var Xn = math.multiply(graph.X0, math.pow(graph.P, step));
  
  for(var i = 0; i < graph.nodes.length; i++) {
    graph.nodes[i].nbWalker = Xn.subset(math.index(i));
    

  }
  
  step++;
  update();
  
}

function update() {

  if(node != null) {

    node
      .transition()
      .attr("opacity", function(d) { return (d.nbWalker/nbWalkerTot)*0.9+0.1 })  
    
    node
      .attr("title", function(d) { return d.nbWalker});
      
   
    console.log("opacity and label refreshed");
  }

}

function reinitialization() {
  
  step = 1;
 
  
  for(var i = 0; i < graph.nodes.length; i++) {
    graph.nodes[i].nbWalker = graph.X0[i];
    

  }
  
  
  update();  
}

//Let the user select nodes to do the partition shown in the right corner of the page
function partition(){
        svg
                .on( "mousedown", function() {
                        var m = d3.mouse( this);
                        //the selection is a rectangle with rounded corners but we can try with ellipse, cx, cy, rx, ry
                        svg.append( "rect")
                        .attr({
                                rx      : 70,
                                ry      : 70,
                                class   : "selection",
                                x       : m[0],
                                y       : m[1],
                                width   : 0,
                                height  : 0
                        })
                })
                .on( "mousemove", function() {
                        var s = svg.select( "rect.selection");
 
                        if( !s.empty()) {
                                var m = d3.mouse( this),
 
                                        d = {
                                                x       : parseInt( s.attr( "x"), 10),
                                                y       : parseInt( s.attr( "y"), 10),
                                                width   : parseInt( s.attr( "width"), 10),
                                                height  : parseInt( s.attr( "height"), 10)
                                        },
                                        move = {
                                                x : m[0] - d.x,
                                                y : m[1] - d.y
                                        };
 
                                if( move.x < 1 || (move.x*2<d.width)) {
                                        d.x = m[0];
                                        d.width -= move.x;
                                } else {
                                        d.width = move.x;      
                                }
 
                                if( move.y < 1 || (move.y*2<d.height)) {
                                        d.y = m[1];
                                        d.height -= move.y;
                                } else {
                                        d.height = move.y;      
                                }
                           
                                s.attr( d);
                               
                                d3.selectAll('.node').each(function(element){
                                        if(!d3.select(this).classed("selected")&&
                                                element.x>=d.x && element.x<=d.x+d.width &&
                                                element.y>=d.y && element.y<=d.y+d.height){
                                                        //the circles we went over get the dashed border                             
                                                        d3.select(this).classed("selected",true); 
                                                        var isInGroupNode = false;
                                                        if(groupNode !== null){
                                                                for(var i = 0; i < groupNode.length && !isInGroupNode; i++){
                                                                        if(element.id===groupNode[i].id){
                                                                                isInGroupNode = true;
                                                                        }
                                                                }
                                                        }
                                                        if(!isInGroupNode){
                                                                groupNode.push(element);
                                                        }                              
                                        }
                                });
                        }
                })
                .on("mouseup", function(){
                //svg.select(".selection") is an array containing the dashed rectangle
                        svg.select( ".selection").remove();
                });
          }

</script>

